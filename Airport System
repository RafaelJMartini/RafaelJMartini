#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <time.h>

typedef struct favi{
    char id[6];
    //OS CONTADORES CONTAM QUANTAS VEZES *CADA* AVIÃO ATERRISSOU OU DECOLOU
    int cont_a;
    int cont_d;
    int status;    //-1: recém inicializado 0:está no aeroporto 1:está fora do aeroporto 2:está na FDEC 3:está na FATE
    struct favi *prox;
}FAVI;

typedef struct fdec{
    char id[6];
    struct fdec *prox;
}FDEC;

typedef struct fate{
    char id[6];
    struct fate *prox;
}FATE;

typedef struct ldisp{
    char info;
    struct favi *proxfavi;
    struct ldisp *prox;
}LDISP;

typedef struct relatorio{
    char id[6];
    int tipo; //0 - decolagem 1 - aterrissagem
    char tempo[27];
    struct relatorio *prox;
}RELATORIO;

typedef struct header{
    LDISP *iniciol,*fiml,*atuall;
    FATE *inicioa,*fima,*atuala;
    FDEC *iniciod,*fimd,*atuald;
    RELATORIO *inicior,*fimr,*atualr;
}HEADER;

HEADER head = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};

void inicializa_lista(char c){
  LDISP *pnovo;

  pnovo=(LDISP*)malloc(sizeof(LDISP));
  pnovo->info=c;
  pnovo->proxfavi = NULL;
  pnovo->prox = NULL;

  if(head.iniciol == NULL){
     head.iniciol = pnovo;
     head.fiml = pnovo;
  }
  else{
        head.fiml->prox = pnovo;
        head.fiml = pnovo;
  }
}

void retirar_fila(char cod[6]){
head.atuall = head.iniciol;
int stat;
while(head.atuall != NULL && head.atuall->info != cod[0]){
    head.atuall = head.atuall->prox;
}
if(head.atuall != NULL){
    FAVI *aux;
    aux = head.atuall->proxfavi;
    while(aux!= NULL && strcmp(aux->id,cod) != 0){
        aux = aux->prox;
    }
    if(aux!=NULL){
        stat = aux->status;
    }
    else{
        printf("\nAviao nao cadastrado!\n\n");
        return;
    }
    if(stat == 2){//está na FDEC
        FDEC *ant;
        head.atuald = head.iniciod;
        ant = head.iniciod;
        aux->status = 0;
        if(head.iniciod->prox == NULL){
                head.iniciod = NULL;
        }
        else{
        while(head.atuald!=NULL && strcmp(head.atuald->id,cod)!=0){
            ant = head.atuald;
            head.atuald = head.atuald->prox;
        }
        if(head.atuald->prox == NULL){
            head.fimd = ant;
            ant->prox = NULL;
        }
        else{
            if(head.atuald == head.iniciod && head.atuald ->prox == head.fimd){
                head.iniciod = head.fimd;
            }
            else{
                ant->prox = head.atuald->prox;
            }
        }
        }
        printf("\nO aviao foi removido da fila de decolagem!\n\n");
        free(head.atuald);
    }
    else{
        if(stat == 3){//está na FATE
        FATE *ant;
        head.atuala = head.inicioa;
        ant = head.inicioa;
        aux->status = 1;
        if(head.inicioa->prox == NULL){
                head.inicioa = NULL;
        }
        else{
        while(head.atuala!=NULL && strcmp(head.atuala->id,cod)!=0){
            ant = head.atuala;
            head.atuala = head.atuala->prox;
        }
        if(head.atuala->prox == NULL){
            head.fima= ant;
            ant->prox = NULL;
        }
        else{
            if(head.atuala == head.inicioa&& head.atuala ->prox == head.fima){
                head.inicioa = head.fima;
            }
            else{
                ant->prox = head.atuala->prox;
            }
        }
        }
        printf("\nO aviao foi removido da fila de aterrissagem!\n\n");
        free(head.atuala);
        }
        else{
            printf("\nO aviao nao esta em nenhuma fila\n\n");
        }
    }
}
else{
    printf("\nCodigo invalido!\n\n");
}


}

int autentica_cod(char cod[6]){
for(int i = 0;i<5;i++){
    if(i<=2){
        cod[i] = toupper(cod[i]);
        if(cod[i]<'A' || cod[i]>'Z'){
            return 0;
        }
    }
    else{
        if(cod[i]<'0' || cod[i]>'9'){
            return 0;
        }
    }
}
cod[5] = '\0';
return 1;
}



void enfileira_aviao(char cod[6]){
    FAVI *pnovo;
    int ja_tem=0;
    head.atuall = head.iniciol;
    while(head.atuall != NULL && head.atuall->info!=cod[0]){
     head.atuall = head.atuall->prox;
    }
    if(head.atuall != NULL){//Verifica se o cod começa com uma letra
        pnovo=(FAVI*)malloc(sizeof(FAVI));
        for(int i=0;i<6;i++){
        pnovo->id[i]=cod[i];
        }
        pnovo->cont_a = 0;
        pnovo->cont_d = 0;
        pnovo->status = -1;
        pnovo->prox = NULL;
        FAVI *atual = head.atuall->proxfavi;

        if(head.atuall->proxfavi == NULL){
            head.atuall->proxfavi = pnovo;
            printf("\nAviao adicionado!\n\n");
        }
        else{
            while(atual->prox != NULL){
                if(strcmp(atual->id,cod)==0){
                    printf("\nO id ja esta cadastrado!\n\n");
                    ja_tem = 1;
                }
                atual = atual->prox;
            }

            if(strcmp(atual->id,cod)==0){
                printf("\nO id ja esta cadastrado!\n\n");
                ja_tem = 1;
            }
            if(ja_tem == 0){
                atual->prox = pnovo;
                printf("\nAviao adicionado!\n\n");
            }
        }
    }
    else
  	printf("\nSeu codigo nao comeca com uma letra!\n\n");
}

void escreve(){
    FAVI *avi;
    printf("\nAvioes cadastrados:\n");
    head.atuall = head.iniciol;
    for(int i=0;i<26;i++){
        if(head.atuall->proxfavi != NULL){
            avi = head.atuall->proxfavi;
                while (avi != NULL) {
                printf("%s", avi->id);
                printf("\tAterrissagens: %d",avi->cont_a);
                printf("\tDecolagens: %d\n",avi->cont_d);
                avi = avi->prox;
                }
        }
        head.atuall = head.atuall->prox;
    }
    printf("\n");
}

void aut_dec(char cod[6]){
    head.atuall = head.iniciol;
    while(head.atuall != NULL && head.atuall->info!=cod[0]){
     head.atuall = head.atuall->prox;
    }
    if(head.atuall != NULL){//achou a lista com a primeira letra certa
        FAVI *procura;
        procura = head.atuall->proxfavi;
        while(procura !=NULL && (strcmp(procura->id,cod)!=0)){
            procura = procura->prox;
        }
        if(procura != NULL){
            if(procura->status == -1 || procura->status == 0){
                //enfileirar na FDEC
                FDEC *pnovo = (FDEC *)malloc(sizeof(FDEC));
                for(int j=0;j<6;j++)
                pnovo->id[j] = procura->id[j];
                procura->status = 2;
                if(head.iniciod == NULL){
                    head.iniciod = pnovo;
                    head.iniciod->prox = NULL;
                    head.fimd = pnovo;
                }
                else{
                    head.fimd->prox = pnovo;
                    head.fimd = pnovo;
                    head.fimd->prox = NULL;
                }
                printf("\nAutorizacao concedida!\n\n");
            }
            else{
                printf("\nO aviao nao esta disponivel para decolagem\n\n");
            }
        }
        else{
            printf("\nCodigo do aviao nao foi encontrado!\n\n");
        }
    }
    else{
        printf("\nCodigo invalido!\n\n");
    }
}

void ver_dec(FDEC *lst){
    if ( lst!=NULL){
printf("%s\n",lst->id);
ver_dec(lst->prox);
}
}

void aut_ate(char cod[6]){
    head.atuall = head.iniciol;
    while(head.atuall != NULL && head.atuall->info!=cod[0]){
     head.atuall = head.atuall->prox;
    }
    if(head.atuall != NULL){//achou a lista com a primeira letra certa
        FAVI *procura;
        procura = head.atuall->proxfavi;
        while(procura !=NULL && (strcmp(procura->id,cod)!=0)){
            procura = procura->prox;
        }

        if(procura != NULL){
            if(procura->status == -1 || procura->status == 1){
                //enfileirar na FATE
                FATE *pnovo = (FATE *)malloc(sizeof(FATE));
                for(int j=0;j<6;j++)
                pnovo->id[j] = procura->id[j];
                procura->status = 3;
                if(head.inicioa == NULL){
                    head.inicioa = pnovo;
                    head.inicioa->prox = NULL;
                    head.fima = pnovo;
                }
                else{
                    head.fima->prox = pnovo;
                    head.fima = pnovo;
                    head.fima->prox = NULL;
                }
                printf("\nAutorizacao concedida!\n\n");
            }
            else{
                printf("\nO aviao nao esta disponivel para aterrissagem\n\n");
            }
        }
        else{
            printf("\nCodigo do aviao nao foi encontrado!\n\n");
        }
    }
    else{
        printf("\nCodigo invalido!\n\n");
    }
}

void ver_ate(FATE *lst){
    if ( lst!=NULL){
printf("%s\n",lst->id);
ver_ate(lst->prox);
}
}

void registra_relatorio(char cod[6],int tipo){
    struct tm* ptr;
    time_t t;
    t = time(NULL);
    ptr = localtime(&t);

    RELATORIO *pnovo = (RELATORIO *)malloc(sizeof(RELATORIO));
    strcpy(pnovo->id,cod);
    pnovo->tipo = tipo;
    strcpy(pnovo->tempo,asctime(ptr));
    if(head.inicior == NULL){
        head.inicior = pnovo;
        head.fimr = pnovo;
    }
    else{
        head.fimr->prox = pnovo;
        head.fimr = pnovo;
    }
    pnovo->prox = NULL;
}

void contador(char cod[6],int tipo){
// tipo 0 = aterrissou
// tipo 1 = decolou
    head.atuall = head.iniciol;

    while(head.atuall != NULL && head.atuall->info!=cod[0]){
        head.atuall = head.atuall->prox;
    }
        FAVI *procura;
        procura = head.atuall->proxfavi;
        while(procura !=NULL && (strcmp(procura->id,cod)!=0)){
            procura = procura->prox;
        }

        registra_relatorio(procura->id,tipo);

        if(tipo == 0){
        procura->cont_a = procura->cont_a + 1;
        procura->status = 0;
        }
        else{
        procura->cont_d = procura->cont_d + 1;
        procura->status = 1;
        }
}

void decolar(){
    char cod[6];
    head.atuald = head.iniciod;
    if(head.iniciod!= NULL){// se tiver algum avião na lista de decolagem
        for(int i=0;i<6;i++)
        cod[i] = head.iniciod->id[i];

        head.atuald = head.atuald->prox;
        free(head.iniciod);
        head.iniciod = head.atuald;
        printf("\nAviao decolou!\n\n");
    }
    else{
        printf("Nao ha avioes na fila de decolagem!\n\n");
        return;
    }
    contador(cod,1);
}

void aterrissar(){
    char cod[6];

    head.atuala = head.inicioa;
    if(head.inicioa!= NULL){// se tiver algum avião na lista de aterrissagem
        for(int i=0;i<6;i++)
        cod[i] = head.inicioa->id[i];

        head.atuala = head.atuala->prox;
        free(head.inicioa);
        head.inicioa = head.atuala;
        printf("\nAviao aterrissou!\n\n");
    }
    else{
        printf("\nNao ha avioes na fila de aterrissagem!\n\n");
        return;
    }
    contador(cod,0);
}

void mostra_relatorio(){
    if(head.inicior == NULL){
        printf("\nNao ha registros no relatorio\n\n");
    }
    else{
        head.atualr = head.inicior;
        printf("\nRelatorio de operacoes:\n\n");

        while(head.atualr != NULL){
        printf("Id do aviao: %s\t",head.atualr->id);
        printf("Operacao:");
        if(head.atualr->tipo == 1){
            printf(" Decolagem\t");
        }
        else{
            printf(" Aterrissagem\t");
        }
        printf("Data: ");
        printf("%s",head.atualr->tempo);
        printf("\n");
        head.atualr = head.atualr->prox;
        }
    }
}

void aterrissagem_emergencia(char cod[6]){
    head.atuall = head.iniciol;

    while(head.atuall != NULL && head.atuall->info!=cod[0]){
        head.atuall = head.atuall->prox;
    }
    if(head.atuall != NULL){//achou a lista com a primeira letra certa
        FAVI *procura;
        procura = head.atuall->proxfavi;
        while(procura != NULL && (strcmp(procura->id,cod)!=0)){
            procura = procura->prox;
        }

        if(procura != NULL){
            if(procura->status == -1 || procura->status == 1){
                //enfileirar na FATE
                FATE *pnovo = (FATE *)malloc(sizeof(FATE));
                for(int j=0;j<6;j++)
                pnovo->id[j] = procura->id[j];
                procura->status = 3;

                if(head.inicioa == NULL){
                    head.inicioa = pnovo;
                    head.inicioa->prox = NULL;
                    head.fima = pnovo;
                }
                else{
                    pnovo->prox = head.inicioa;
                    head.inicioa = pnovo;
                }
                printf("\nAutorizacao de emergencia concedida!\n\n");
            }
            else{
                printf("\nO aviao nao esta disponivel para aterrissagem\n\n");
            }
        }
        else{
            printf("\nCodigo do aviao nao foi encontrado!\n\n");
        }
    }
    else{
        printf("\nCodigo invalido!\n\n");
    }
}

void menu(){
     printf("1 - Cadastrar aviao\n");
     printf("2 - Mostrar avioes cadastrados\n");
     printf("3 - Autorizar decolagem\n");
     printf("4 - Decolar\n");
     printf("5 - Autorizar aterrissagem\n");
     printf("6 - Aterrissar\n");
     printf("7 - Proximas decolagens\n");
     printf("8 - Proximas aterrissagens\n");
     printf("9 - Relatorio aeroporto\n");
     printf("10 - Retirar um avião da fila (aterrissagem/decolagem)\n");
     printf("11 - Aterrissagem de emergência\n");
     printf("0 - Fim\n");
}

void main(){
int i,resp;
char c,cod[6];
for(i=0;i<26;i++){
    c = 'A' + i;
    inicializa_lista(c);
}

    menu();
    fflush(stdin);
    printf("Digite sua opcao:\n");
    scanf("%d", &resp);
    while(resp!=0){
    switch(resp){
    case 1:
        printf("Digite o codigo do aviao:");
        scanf("%s",&cod);

        if(autentica_cod(cod) == 1)
            enfileira_aviao(cod);
        else
            printf("\nCodigo invalido!\n\n");
        break;
    case 2:
        escreve();
        break;
    case 3:
        printf("\nDigite o codigo do aviao autorizado para a decolagem:\n\n");
        scanf("%s",&cod);

        if(autentica_cod(cod) == 1)
            aut_dec(cod);
        else
            printf("\nCodigo invalido!\n\n");
        break;
    case 4:
        decolar();
        break;
    case 5:
        printf("\nDigite o codigo do aviao autorizado para a aterrissagem:\n\n");
        scanf("%s",&cod);
        if(autentica_cod(cod) == 1)
            aut_ate(cod);
        else
            printf("\nCodigo invalido!\n\n");
        break;
    case 6:
        aterrissar();
        break;
    case 7:
        if(head.iniciod != NULL){
        printf("\nLista de avioes autorizados a decolar:\n");
        ver_dec(head.iniciod);
        }
        else{
            printf("\nNao ha avioes autorizados a decolar!\n");
        }
        printf("\n");
        break;
    case 8:
        if(head.inicioa != NULL){
        printf("\nLista de avioes autorizados a aterrissar:\n");
        ver_ate(head.inicioa);
        }
        else{
            printf("\nNao ha avioes autorizados a aterrissar!\n");
        }
        printf("\n");
        break;
    case 9:
        mostra_relatorio();
        break;
    case 10:
        printf("Digite o codigo do aviao:");
        scanf("%s",&cod);
        if(autentica_cod(cod) == 1)
            retirar_fila(cod);
        else
            printf("\nCodigo invalido!\n\n");
        break;
    case 11:
        printf("Digite o codigo do aviao:");
        scanf("%s",&cod);
        if(autentica_cod(cod) == 1)
            aterrissagem_emergencia(cod);
        else
            printf("\nCodigo invalido!\n\n");
        break;

    default:
        printf("\nTente novamente\n\n");
        break;


    }
    menu();
    fflush(stdin);
    printf("Digite sua opcao:\n");
    scanf("%d", &resp);
    }
    printf("\nPrograma encerrado!\n");
}
